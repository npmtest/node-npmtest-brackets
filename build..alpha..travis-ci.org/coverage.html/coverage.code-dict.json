{"/home/travis/build/npmtest/node-npmtest-brackets/test.js":"/* istanbul instrument in package npmtest_brackets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-brackets/lib.npmtest_brackets.js":"/* istanbul instrument in package npmtest_brackets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_brackets = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_brackets = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-brackets/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-brackets && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_brackets */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_brackets\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_brackets.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_brackets.rollup.js'] =\n            local.assetsDict['/assets.npmtest_brackets.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_brackets.__dirname +\n                    '/lib.npmtest_brackets.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-brackets/node_modules/brackets/lib/server.js":"/*jshint -W086 */\n\n\"use strict\";\n\n// NOTE: Brackets doesn't fully support browsers yet and we need some workarounds. Workarounds will be marked with \"HACK:\" label.\n\nvar http        = require(\"http\"),\n    https       = require(\"https\"),\n    path        = require(\"path\"),\n    send        = require(\"send\"),\n    util        = require(\"util\"),\n    urlUtil     = require(\"url\"),\n    files       = require(\"./files\"),\n    domains     = require(\"./domains/socket\"),\n    socket      = require(\"socket.io\"),\n    brckDist    = {root: path.join(__dirname, \"..\", \"brackets-dist\")},\n    zipped      = { \".js\": \"application/javascript\", \".css\": \"text/css\"},\n    defaultPort = 6800;\n\nrequire(\"./shim\");\n\nfunction removeTrailingSlash(path) {\n    return path[path.length - 1] === \"/\" ? path.substr(0, path.length - 1) : path;\n}\n\nfunction createHttpServer(inst, port) {\n    inst.httpServer = http.createServer(function (req, res) {\n        if (req.url === \"/\") {\n            res.writeHead(302, {Location: inst.httpRoot + \"/\"});\n            res.end();\n        } else {\n            res.writeHead(304);\n            res.end(\"Not found\");\n        }\n    });\n    inst.io = socket(inst.httpServer);\n    inst.httpServer.listen(port);\n    console.log(util.format(\"\\n  listening on port %d\\n\", port));\n}\n\nfunction attachStatic(inst) {\n    var srv     = inst.httpServer,\n        root    = inst.httpRoot,\n        evs     = srv.listeners(\"request\").slice(0),\n        extDir  = { root: path.join(inst.supportDir, \"extensions\")} ;\n\n    srv.removeAllListeners(\"request\");\n    srv.on(\"request\", function(req, res) {\n        if (req.url.startsWith(root)) {\n            var url = req.url.substr(root.length);\n\n            if (url === \"\") {\n                res.writeHead(301, {Location: inst.httpRoot + \"/\"});\n                res.end();\n                return;\n            }\n\n            if (url === \"/\") {\n                url = \"/index.html\";\n            }\n\n            if (url.startsWith(\"/proxy/\")) {\n                var reqUrl      = decodeURIComponent(url.substr(\"/proxy/\".length)),\n                    options     = urlUtil.parse(reqUrl),\n                    httpClient  = options.protocol === \"http\" ? http : https;\n\n                delete options.protocol;\n                options.method = \"GET\";\n\n                req.pause();\n                var connector = httpClient.request(options, function(_res) {\n                    _res.pause();\n                    res.writeHead(_res.statusCode, _res.headers);\n                    _res.pipe(res);\n                    _res.resume();\n                });\n                req.pipe(connector);\n                req.resume();\n                return;\n            }\n\n            var cntType = zipped[path.extname(url)];\n            if (cntType) {\n                send(req, url + \".gz\", brckDist)\n                    .on(\"headers\", function (_res) {\n                        _res.setHeader(\"Content-Encoding\", \"gzip\");\n                        _res.setHeader(\"Content-Type\", cntType);\n                    })\n                    .pipe(res);\n                return;\n            }\n\n            send(req, url, brckDist).pipe(res);\n        } else if (req.url.startsWith(\"/support/extensions/\")) {\n            try {\n                return send(req, req.url.substr(\"/support/extensions\".length), extDir).pipe(res);\n            } catch (e) {\n                res.writeHead(500, {\n                    \"Content-Length\": e.message.length,\n                    \"Content-Type\": \"text/plain\"\n                });\n                res.end(e.message);\n            }\n        } else {\n            for (var i = 0; i < evs.length; i++) {\n                evs[i].call(srv, req, res);\n            }\n        }\n    });\n}\n\nfunction Server(srv, opts) {\n    if (!(this instanceof Server)) {\n        return new Server(srv, opts);\n    }\n\n    switch (typeof srv) {\n        case \"undefined\":\n        case \"null\":\n            createHttpServer(this, defaultPort);\n            break;\n        case \"object\":\n            if (srv instanceof socket) {\n                this.io = srv;\n                this.httpServer = srv.httpServer;\n            } else if (srv instanceof http.Server) {\n                this.httpServer = srv;\n                this.io = socket(this.httpServer);\n            } else {\n                opts = srv;\n                srv = null;\n                createHttpServer(this, defaultPort);\n            }\n            break;\n        case \"number\":\n        case \"string\":\n            createHttpServer(this, Number(srv));\n            break;\n        default:\n            throw \"Invalid argument – srv.\";\n    }\n\n    opts = opts || {};\n\n    this.httpRoot = removeTrailingSlash(opts.httpRoot || \"/brackets\");\n    this.defaultExtensions = path.join(brckDist.root, \"extensions\");\n    this.supportDir = removeTrailingSlash(opts.supportDir || path.resolve(\"./brackets\"));\n    this.projectsDir = removeTrailingSlash(opts.projectsDir || path.resolve(\"./projects\"));\n    this.samplesDir = removeTrailingSlash(opts.samplesDir || path.join(brckDist.root, \"samples\"));\n    this.allowUserDomains = opts.allowUserDomains || false;\n\n    switch (typeof opts.fileSystem) {\n        case \"string\":\n            // Reserved for future build-in providers.\n            this.fileSystem = require(\"./file-sys/\" + opts.fileSystem);\n            break;\n        case \"object\":\n            this.fileSystem = opts.fileSystem;\n            break;\n        case \"undefined\":\n        case \"null\":\n            this.fileSystem = require(\"./file-sys/native\");\n            break;\n        default:\n            throw new Error(\"Invalid fileSystem option.\");\n    }\n\n    var that = this;\n    this.fileSystem.mkdir(this.projectsDir, function (err) {\n        if (err && err.code !== \"EEXIST\") {\n            throw err;\n        }\n\n        attachStatic(that);\n\n        // Attach file system methods to socket.io.\n        files.init(that);\n\n        // Attach Brackets domians.\n        domains.init(that);\n    });\n}\n\nmodule.exports = Server;\n","/home/travis/build/npmtest/node-npmtest-brackets/node_modules/brackets/lib/files.js":"\"use strict\";\n\nfunction init(srv) {\n    var fs = srv.fileSystem;\n\n    function stat(req, callback) {\n        fs.resolvePath(req, srv, function (err, path) {\n            if (err) {\n                return callback({ err: err });\n            }\n\n            fs.stat(path, function (err, stats) {\n                callback(err ? { err: err } : { stats: stats });\n            });\n        });\n    }\n\n    function readdir(req, callback) {\n        fs.resolvePath(req, srv, function (err, path) {\n            if (err) {\n                return callback({ err: err });\n            }\n\n            fs.readdir(path, function (err, files) {\n                callback({ err: err, contents: files });\n            });\n        });\n    }\n\n    function mkdir(req, callback) {\n        fs.resolvePath(req.path, srv, function (err, path) {\n            if (err) {\n                return callback(err);\n            }\n\n            fs.mkdir(path, req.mode, callback);\n        });\n    }\n\n    function rename(req, callback) {\n        fs.resolvePath(req.oldPath, srv, function (err, oldPath) {\n            if (err) {\n                return callback(err);\n            }\n            fs.resolvePath(req.newPath, srv, function (err, newPath) {\n                if (err) {\n                    return callback(err);\n                }\n\n                fs.rename(oldPath, newPath, callback);\n            });\n        });\n    }\n\n    function readFile(req, callback) {\n        fs.resolvePath(req.path, srv, function (err, path) {\n            if (err) {\n                return callback({ err: err });\n            }\n\n            fs.readFile(path, req.encoding, function (err, data) {\n                callback({ err: err, data: data });\n            });\n        });\n    }\n\n    function writeFile(req, callback) {\n        fs.resolvePath(req.path, srv, function (err, path) {\n            if (err) {\n                return callback(err);\n            }\n\n            fs.writeFile(path, req.data, req.encoding, callback);\n        });\n    }\n\n    function unlink(req, callback) {\n        fs.resolvePath(req, srv, function (err, path) {\n            if (err) {\n                return callback(err);\n            }\n\n            fs.unlink(path, callback);\n        });\n    }\n\n    function moveToTrash(req, callback) {\n        fs.resolvePath(req, srv, function (err, path) {\n            if (err) {\n                return callback(err);\n            }\n\n            fs.moveToTrash(path, callback);\n        });\n    }\n\n    function watchPath(req, callback) {\n        fs.resolvePath(req, srv, function (err, path) {\n            if (err) {\n                return callback(err);\n            }\n\n            fs.watchPath(path, callback);\n        });\n    }\n\n    function unwatchPath(req, callback) {\n        fs.resolvePath(req, srv, function (err, path) {\n            if (err) {\n                return callback(err);\n            }\n\n            fs.unwatchPath(path, callback);\n        });\n    }\n\n    function unwatchAll(req, callback) {\n        fs.resolvePath(req, srv, function (err, path) {\n            if (err) {\n                return callback(err);\n            }\n\n            fs.unwatchAll(path, callback);\n        });\n    }\n\n    function copyFile(req, callback) {\n        fs.resolvePath(req.src, srv, function (err, src) {\n            if (err) {\n                return callback(err);\n            }\n            fs.resolvePath(req.dest, srv, function (err, dest) {\n                if (err) {\n                    return callback(err);\n                }\n\n                fs.rename(src, dest, callback);\n            });\n        });\n    }\n\n    function onConnection (socket) {\n        socket.emit(\"greeting\", \"hi\");\n\n        socket\n            .on(\"stat\", stat)\n            .on(\"mkdir\", mkdir)\n            .on(\"readdir\", readdir)\n            .on(\"rename\", rename)\n            .on(\"readFile\", readFile)\n            .on(\"writeFile\", writeFile)\n            .on(\"unlink\", unlink)\n            .on(\"moveToTrash\", moveToTrash)\n            .on(\"watchPath\", watchPath)\n            .on(\"unwatchPath\", unwatchPath)\n            .on(\"unwatchAll\", unwatchAll)\n            .on(\"copyFile\", copyFile);\n    }\n\n    srv.io\n        .of(srv.httpRoot)\n        .on(\"connection\", onConnection);\n}\n\nexports.init = init;\n","/home/travis/build/npmtest/node-npmtest-brackets/node_modules/brackets/lib/domains/socket.js":"\"use strict\";\n\nvar ConnectionManager = require(\"./ConnectionManager\"),\n    DomainManager     = require(\"./DomainManager\");\n\nfunction init(srv) {\n    var root = srv.httpRoot + \"-ext\",\n        apiUrl = root + \"/api\";\n\n    srv.httpServer.on(\"request\", function (req, res) {\n        if (req.url.startsWith(apiUrl)) {\n            res.setHeader(\"Content-Type\", \"application/json\");\n            res.end(\n                JSON.stringify(DomainManager.getDomainDescriptions(),\n                               null,\n                               4)\n            );\n        }\n    });\n\n    srv.io\n        .of(root)\n        .on(\"connection\", ConnectionManager.createConnection);\n\n    DomainManager.httpRoot = srv.httpRoot;\n    DomainManager.supportDir = srv.supportDir;\n    DomainManager.projectsDir = srv.projectsDir;\n    DomainManager.samplesDir = srv.samplesDir;\n    DomainManager.allowUserDomains = srv.allowUserDomains;\n    DomainManager.loadDomainModulesFromPaths([\"./BaseDomain\"]);\n}\n\nexports.init = init;\n","/home/travis/build/npmtest/node-npmtest-brackets/node_modules/brackets/lib/domains/ConnectionManager.js":"/*\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n(function () {\n    \"use strict\";\n\n    var DomainManager = require(\"./DomainManager\");\n\n    /**\n     * @private\n     * @type{Array.<Connection>}\n     * Currently active connections\n     */\n    var _connections = [];\n\n    /**\n     * @private\n     * @constructor\n     * A WebSocket connection to a client. This is a private constructor.\n     * Callers should use the ConnectionManager.createConnection function\n     * instead.\n     * @param {WebSocket} ws The WebSocket representing the client\n     */\n    function Connection(ws) {\n        this._ws = ws;\n        this._connected = true;\n        this._ws.on(\"message\", this._receive.bind(this));\n        this._ws.on(\"close\", this.close.bind(this));\n    }\n\n    /**\n     * @private\n     * @type {boolean}\n     * Whether the connection is connected.\n     */\n    Connection.prototype._connected = false;\n\n    /**\n     * @private\n     * @type {WebSocket}\n     * The connection's WebSocket\n     */\n    Connection.prototype._ws = null;\n\n    /**\n     * @private\n     * Sends a message over the WebSocket. Called by public sendX commands.\n     * @param {string} type Message type. Currently supported types are\n         \"event\", \"commandResponse\", \"commandError\", \"error\"\n     * @param {object} message Message body, must be JSON.stringify-able\n     */\n    Connection.prototype._send = function (type, message) {\n        if (this._ws && this._connected) {\n            try {\n                this._ws.send(JSON.stringify({type: type, message: message}));\n            } catch (e) {\n                console.error(\"[Connection] Unable to stringify message: \" + e.message);\n            }\n        }\n    };\n\n    /**\n     * @private\n     * Sends a binary message over the WebSocket. Implicitly interpreted as a\n     * message of type \"commandResponse\".\n     * @param {Buffer} message\n     */\n    Connection.prototype._sendBinary = function (message) {\n        if (this._ws && this._connected) {\n            this._ws.send(message, {binary: true, mask: false});\n        }\n    };\n\n    /**\n     * @private\n     * Receive event handler for the WebSocket. Responsible for parsing\n     * message and handing it off to the appropriate handler.\n     * @param {string} message Message received by WebSocket\n     */\n    Connection.prototype._receive = function (message) {\n        var m;\n        try {\n            m = JSON.parse(message);\n        } catch (parseError) {\n            this.sendError(\"Unable to parse message: \" + message);\n            return;\n        }\n\n        if (m.id !== null && m.id !== undefined && m.domain && m.command) {\n            // okay if m.parameters is null/undefined\n            try {\n                DomainManager.executeCommand(this, m.id, m.domain,\n                                             m.command, m.parameters);\n            } catch (executionError) {\n                this.sendCommandError(m.id, executionError.message,\n                                      executionError.stack);\n            }\n        } else {\n            this.sendError(\"Malformed message: \" + message);\n        }\n    };\n\n    /**\n     * Closes the connection and does necessary cleanup\n     */\n    Connection.prototype.close = function () {\n        if (this._ws) {\n            try {\n                this._ws.close();\n            } catch (e) { }\n        }\n        this._connected = false;\n        _connections.splice(_connections.indexOf(this), 1);\n    };\n\n    /**\n     * Sends an Error message\n     * @param {object} message Error message. Must be JSON.stringify-able.\n     */\n    Connection.prototype.sendError = function (message) {\n        this._send(\"error\", {message: message});\n    };\n\n    /**\n     * Sends a response to a command execution\n     * @param {number} id unique ID of the command that was executed. ID is\n     *    generated by the client when the command is issued.\n     * @param {object|Buffer} response Result of the command execution. Must\n     *    either be JSON.stringify-able or a raw Buffer. In the latter case,\n     *    the result will be sent as a binary response.\n     */\n    Connection.prototype.sendCommandResponse = function (id, response) {\n        if (Buffer.isBuffer(response)) {\n            // Assume the id is an unsigned 32-bit integer, which is encoded\n            // as a four-byte header\n            var header = new Buffer(4);\n\n            header.writeUInt32LE(id, 0);\n\n            // Prepend the header to the message\n            var message = Buffer.concat([header, response], response.length + 4);\n\n            this._sendBinary(message);\n        } else {\n            this._send(\"commandResponse\", {id: id, response: response });\n        }\n    };\n\n    /**\n     * Sends a response indicating that an error occurred during command\n     * execution\n     * @param {number} id unique ID of the command that was executed. ID is\n     *    generated by the client when the command is issued.\n     * @param {string} message Error message\n     * @param {?object} stack Call stack from the exception, if possible. Must\n     *    be JSON.stringify-able.\n     */\n    Connection.prototype.sendCommandError = function (id, message, stack) {\n        this._send(\"commandError\", {id: id, message: message, stack: stack});\n    };\n\n    /**\n     * Sends an event message\n     * @param {number} id unique ID for the event.\n     * @param {string} domain Domain of the event.\n     * @param {string} event Name of the event\n     * @param {object} parameters Event parameters. Must be JSON.stringify-able.\n     */\n    Connection.prototype.sendEventMessage =\n        function (id, domain, event, parameters) {\n        this._send(\"event\", {id: id,\n                             domain: domain,\n                             event: event,\n                             parameters: parameters\n                            });\n    };\n\n    /**\n     * Factory function for creating a new Connection\n     * @param {WebSocket} ws The WebSocket connected to the client.\n     */\n    function createConnection(ws) {\n        _connections.push(new Connection(ws));\n    }\n\n    /**\n     * Closes all connections gracefully. Should be called during shutdown.\n     */\n    function closeAllConnections() {\n        var i;\n        for (i = 0; i < _connections.length; i++) {\n            try {\n                _connections[i].close();\n            } catch (err) { }\n        }\n        _connections = [];\n    }\n\n    /**\n     * Sends all open connections the specified event\n     * @param {number} id unique ID for the event.\n     * @param {string} domain Domain of the event.\n     * @param {string} event Name of the event\n     * @param {object} parameters Event parameters. Must be JSON.stringify-able.\n     */\n    function sendEventToAllConnections(id, domain, event, parameters) {\n        _connections.forEach(function (c) {\n            c.sendEventMessage(id, domain, event, parameters);\n        });\n    }\n\n    exports.createConnection          = createConnection;\n    exports.closeAllConnections       = closeAllConnections;\n    exports.sendEventToAllConnections = sendEventToAllConnections;\n}());\n","/home/travis/build/npmtest/node-npmtest-brackets/node_modules/brackets/lib/domains/DomainManager.js":"/*\n * Copyright (c) 2013 Adobe Systems Incorporated. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the \"Software\"),\n * to deal in the Software without restriction, including without limitation\n * the rights to use, copy, modify, merge, publish, distribute, sublicense,\n * and/or sell copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n * DEALINGS IN THE SOFTWARE.\n *\n */\n\n(function () {\n    \"use strict\";\n\n    var util                = require(\"util\"),\n        domain              = require(\"domain\"),\n        ConnectionManager   = require(\"./ConnectionManager\");\n\n    /**\n     * @constructor\n     * DomainManager is a module/class that handles the loading, registration,\n     * and execution of all commands and events. It is a singleton, and is passed\n     * to a domain in its init() method.\n     */\n    var self = exports;\n\n    /**\n     * @private\n     * @type {object}\n     * Map of all the registered domains\n     */\n    var _domains = {};\n\n    /**\n     * @private\n     * @type {Array.<Module>}\n     * Array of all modules we have loaded. Used for avoiding duplicate loading.\n     */\n    var _initializedDomainModules = [];\n\n    /**\n     * @private\n     * @type {number}\n     * Used for generating unique IDs for events.\n     */\n    var _eventCount = 1;\n\n    /**\n     * @private\n     * @type {Array}\n     * JSON.stringify-able Array of the current API. In the format of\n     * Inspector.json. This is a cache that we invalidate every time the\n     * API changes.\n     */\n    var _cachedDomainDescriptions = null;\n\n    /**\n     * Returns whether a domain with the specified name exists or not.\n     * @param {string} domainName The domain name.\n     * @return {boolean} Whether the domain exists\n     */\n    function hasDomain(domainName) {\n        return !!_domains[domainName];\n    }\n\n    /**\n     * Returns a new empty domain. Throws error if the domain already exists.\n     * @param {string} domainName The domain name.\n     * @param {{major: number, minor: number}} version The domain version.\n     *   The version has a format like {major: 1, minor: 2}. It is reported\n     *   in the API spec, but serves no other purpose on the server. The client\n     *   can make use of this.\n     */\n    function registerDomain(domainName, version) {\n        if (!hasDomain(domainName)) {\n            // invalidate the cache\n            _cachedDomainDescriptions = null;\n\n            _domains[domainName] = {version: version, commands: {}, events: {}};\n        } else {\n            console.error(\"[DomainManager] Domain \" + domainName + \" already registered\");\n        }\n    }\n\n    /**\n     * Registers a new command with the specified domain. If the domain does\n     * not yet exist, it registers the domain with a null version.\n     * @param {string} domainName The domain name.\n     * @param {string} commandName The command name.\n     * @param {Function} commandFunction The callback handler for the function.\n     *    The function is called with the arguments specified by the client in the\n     *    command message. Additionally, if the command is asynchronous (isAsync\n     *    parameter is true), the function is called with an automatically-\n     *    constructed callback function of the form cb(err, result). The function\n     *    can then use this to send a response to the client asynchronously.\n     * @param {boolean} isAsync See explanation for commandFunction param\n     * @param {?string} description Used in the API documentation\n     * @param {?Array.<{name: string, type: string, description:string}>} parameters\n     *    Used in the API documentation.\n     * @param {?Array.<{name: string, type: string, description:string}>} returns\n     *    Used in the API documentation.\n     */\n    function registerCommand(domainName, commandName, commandFunction, isAsync,\n                              description, parameters, returns) {\n        // invalidate the cache\n        _cachedDomainDescriptions = null;\n\n        if (!hasDomain(domainName)) {\n            registerDomain(domainName, null);\n        }\n\n        if (!_domains[domainName].commands[commandName]) {\n            _domains[domainName].commands[commandName] = {\n                commandFunction: commandFunction,\n                isAsync: isAsync,\n                description: description,\n                parameters: parameters,\n                returns: returns\n            };\n        } else {\n            throw new Error(\"Command \" + domainName + \".\" +\n                            commandName + \" already registered\");\n        }\n    }\n\n    /**\n     * Executes a command by domain name and command name. Called by a connection's\n     * message parser. Sends response or error (possibly asynchronously) to the\n     * connection.\n     * @param {Connection} connection The requesting connection object.\n     * @param {number} id The unique command ID.\n     * @param {string} domainName The domain name.\n     * @param {string} commandName The command name.\n     * @param {Array} parameters The parameters to pass to the command function. If\n     *    the command is asynchronous, will be augmented with a callback function.\n     *    (see description in registerCommand documentation)\n     */\n    function executeCommand(connection, id, domainName,\n                             commandName, parameters) {\n        var el, i;\n\n        for (i = 0; i < parameters.length; i++) {\n            el = parameters[i];\n            if (typeof el === \"string\") {\n                if  (el.startsWith(\"/projects/\")) {\n                    parameters[i] = exports.projectsDir + el.substr(\"/projects\".length);\n                } else if  (el.startsWith(\"/samples/\")) {\n                    parameters[i] = exports.samplesDir + el.substr(\"/samples\".length);\n                }\n            }\n        }\n\n        if (_domains[domainName] &&\n            _domains[domainName].commands[commandName]) {\n            var command = _domains[domainName].commands[commandName];\n            if (command.isAsync) {\n                var execDom     = domain.create(),\n                    callback    = function (err, result) {\n                        if (err) {\n                            connection.sendCommandError(id, err);\n                        } else {\n                            connection.sendCommandResponse(id, result);\n                        }\n                    };\n\n                parameters.push(callback);\n\n                execDom.on(\"error\", function(err) {\n                    connection.sendCommandError(id, err.message);\n                    execDom.dispose();\n                });\n\n                execDom.bind(command.commandFunction).apply(connection, parameters);\n            } else { // synchronous command\n                try {\n                    connection.sendCommandResponse(\n                        id,\n                        command.commandFunction.apply(connection, parameters)\n                    );\n                } catch (e) {\n                    connection.sendCommandError(id, e.message);\n                }\n            }\n        } else {\n            connection.sendCommandError(id, \"no such command: \" +\n                                        domainName + \".\" + commandName);\n        }\n    }\n\n    /**\n     * Registers an event domain and name.\n     * @param {string} domainName The domain name.\n     * @param {string} eventName The event name.\n     * @param {?Array.<{name: string, type: string, description:string}>} parameters\n     *    Used in the API documentation.\n     */\n    function registerEvent(domainName, eventName, parameters) {\n        // invalidate the cache\n        _cachedDomainDescriptions = null;\n\n        if (!hasDomain(domainName)) {\n            registerDomain(domainName, null);\n        }\n\n        if (!_domains[domainName].events[eventName]) {\n            _domains[domainName].events[eventName] = {\n                parameters: parameters\n            };\n        } else {\n            console.error(\"[DomainManager] Event \" + domainName + \".\" +\n                          eventName + \" already registered\");\n        }\n    }\n\n    /**\n     * Emits an event with the specified name and parameters to all connections.\n     *\n     * TODO: Future: Potentially allow individual connections to register\n     * for which events they want to receive. Right now, we have so few events\n     * that it's fine to just send all events to everyone and decide on the\n     * client side if the client wants to handle them.\n     *\n     * @param {string} domainName The domain name.\n     * @param {string} eventName The event name.\n     * @param {?Array} parameters The parameters. Must be JSON.stringify-able\n     */\n    function emitEvent(domainName, eventName, parameters) {\n        if (_domains[domainName] && _domains[domainName].events[eventName]) {\n            ConnectionManager.sendEventToAllConnections(\n                _eventCount++,\n                domainName,\n                eventName,\n                parameters\n            );\n        } else {\n            console.error(\"[DomainManager] No such event: \" + domainName +\n                          \".\" + eventName);\n        }\n    }\n\n    /**\n     * Loads and initializes domain modules using the specified paths. Checks to\n     * make sure that a module is not loaded/initialized more than once.\n     *\n     * @param {Array.<string>} paths The paths to load. The paths can be relative\n     *    to the DomainManager or absolute. However, modules that aren't in core\n     *    won't know where the DomainManager module is, so in general, all paths\n     *    should be absolute.\n     * @return {boolean} Whether loading succeded. (Failure will throw an exception).\n     */\n    function loadDomainModulesFromPaths(paths) {\n        var pathArray = paths;\n        if (!util.isArray(paths)) {\n            pathArray = [paths];\n        }\n        pathArray.forEach(function (path) {\n            if (path.startsWith(exports.httpRoot)) {\n                path = \"../../brackets-srv\" + path.substr(exports.httpRoot.length);\n            } else if (path.startsWith(\"/support/extensions/user/\")) {\n                if (exports.allowUserDomains) {\n                    path = exports.supportDir + path.substr(\"/support\".length);\n                } else {\n                    console.error(\"ERROR: User domains are not allowed: \" + path);\n                    return false;\n                }\n            } else if (path !== \"./BaseDomain\") {\n                console.error(\"ERROR: Invalid domain path: \" + path);\n                return false;\n            }\n\n            try {\n                var m = require(path);\n                if (m && m.init && _initializedDomainModules.indexOf(m) < 0) {\n                    m.init(self);\n                    _initializedDomainModules.push(m); // don't init more than once\n                }\n            } catch (err) {\n                console.error(err);\n                return false;\n            }\n        });\n        return true; // if we fail, an exception will be thrown\n    }\n\n    /**\n     * Returns a description of all registered domains in the format of WebKit's\n     * Inspector.json. Used for sending API documentation to clients.\n     *\n     * @return {Array} Array describing all domains.\n     */\n    function getDomainDescriptions() {\n        if (!_cachedDomainDescriptions) {\n            _cachedDomainDescriptions = [];\n\n            var domainNames = Object.keys(_domains);\n            domainNames.forEach(function (domainName) {\n                var d = {\n                    domain: domainName,\n                    version: _domains[domainName].version,\n                    commands: [],\n                    events: []\n                };\n                var commandNames = Object.keys(_domains[domainName].commands);\n                commandNames.forEach(function (commandName) {\n                    var c = _domains[domainName].commands[commandName];\n                    d.commands.push({\n                        name: commandName,\n                        description: c.description,\n                        parameters: c.parameters,\n                        returns: c.returns\n                    });\n                });\n                var eventNames = Object.keys(_domains[domainName].events);\n                eventNames.forEach(function (eventName) {\n                    d.events.push({\n                        name: eventName,\n                        parameters: _domains[domainName].events[eventName].parameters\n                    });\n                });\n                _cachedDomainDescriptions.push(d);\n            });\n        }\n        return _cachedDomainDescriptions;\n    }\n\n    exports.hasDomain                  = hasDomain;\n    exports.registerDomain             = registerDomain;\n    exports.registerCommand            = registerCommand;\n    exports.executeCommand             = executeCommand;\n    exports.registerEvent              = registerEvent;\n    exports.emitEvent                  = emitEvent;\n    exports.loadDomainModulesFromPaths = loadDomainModulesFromPaths;\n    exports.getDomainDescriptions      = getDomainDescriptions;\n}());\n","/home/travis/build/npmtest/node-npmtest-brackets/node_modules/brackets/lib/shim.js":"\"use strict\";\n\nif (!String.prototype.startsWith) {\n    var toString = {}.toString;\n    String.prototype.startsWith = function (search){\n        if (this === null) {\n            throw new TypeError();\n        }\n        var string = String(this);\n        if (search && toString.call(search) === \"[object RegExp]\") {\n            throw new TypeError();\n        }\n        var stringLength = string.length;\n        var searchString = String(search);\n        var searchLength = searchString.length;\n        var position = arguments.length > 1 ? arguments[1] : undefined;\n\n        var pos = position ? Number(position) : 0;\n        if (pos !== pos) {\n            pos = 0;\n        }\n        var start = Math.min(Math.max(pos, 0), stringLength);\n\n        if (searchLength + start > stringLength) {\n            return false;\n        }\n        var index = -1;\n        while (++index < searchLength) {\n            if (string.charCodeAt(start + index) !== searchString.charCodeAt(index)) {\n                return false;\n            }\n        }\n        return true;\n    };\n}\n","/home/travis/build/npmtest/node-npmtest-brackets/node_modules/brackets/lib/post-install.js":"\"use strict\";\n\nvar fs      = require(\"fs\"),\n    path    = require(\"path\"),\n    glob    = require(\"glob\"),\n    opts    = {\n        cwd: path.join(__dirname, \"..\", \"brackets-srv\")\n    };\n\nglob(\"**/node_modules_\", opts, function (err, files) {\n    if (err) {\n        throw err;\n    }\n\n    if (files) {\n        files.sort(function (a, b) {\n            return  b.length - a.length;\n        });\n\n        files.forEach(function (file) {\n            file = path.join(opts.cwd, file);\n            fs.renameSync(file, file.substr(0, file.length - 1));\n            console.log(\"file: \" + file.substr(0, file.length - 1));\n        });\n    }\n});\n","/home/travis/build/npmtest/node-npmtest-brackets/node_modules/brackets/lib/pre-publish.js":"\"use strict\";\n\nvar fs      = require(\"fs\"),\n    path    = require(\"path\"),\n    glob    = require(\"glob\"),\n    opts    = {\n        cwd: path.join(__dirname, \"..\", \"brackets-srv\")\n    },\n    logFile = \"./install.log\",\n    exists  = fs.existsSync(logFile),\n    conts;\n\nif (exists) {\n    conts = fs.readFileSync(logFile, { encoding: \"utf8\" });\n    fs.unlinkSync(logFile);\n}\n\nif (!conts) {\n    glob(\"**/node_modules\", opts, function (err, files) {\n        if (err) {\n            throw err;\n        }\n\n        if (files) {\n            files.sort(function (a, b) {\n                return  b.length - a.length;\n            });\n\n            files.forEach(function (file) {\n                file = path.join(opts.cwd, file);\n                fs.renameSync(file, file + \"_\");\n                console.log(\"file: \" + file + \"_\");\n            });\n        }\n    });\n}\n"}